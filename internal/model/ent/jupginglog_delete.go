// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"junction/internal/model/ent/jupginglog"
	"junction/internal/model/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// JupgingLogDelete is the builder for deleting a JupgingLog entity.
type JupgingLogDelete struct {
	config
	hooks    []Hook
	mutation *JupgingLogMutation
}

// Where appends a list predicates to the JupgingLogDelete builder.
func (jld *JupgingLogDelete) Where(ps ...predicate.JupgingLog) *JupgingLogDelete {
	jld.mutation.Where(ps...)
	return jld
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (jld *JupgingLogDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, jld.sqlExec, jld.mutation, jld.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (jld *JupgingLogDelete) ExecX(ctx context.Context) int {
	n, err := jld.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (jld *JupgingLogDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(jupginglog.Table, sqlgraph.NewFieldSpec(jupginglog.FieldID, field.TypeInt))
	if ps := jld.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, jld.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	jld.mutation.done = true
	return affected, err
}

// JupgingLogDeleteOne is the builder for deleting a single JupgingLog entity.
type JupgingLogDeleteOne struct {
	jld *JupgingLogDelete
}

// Where appends a list predicates to the JupgingLogDelete builder.
func (jldo *JupgingLogDeleteOne) Where(ps ...predicate.JupgingLog) *JupgingLogDeleteOne {
	jldo.jld.mutation.Where(ps...)
	return jldo
}

// Exec executes the deletion query.
func (jldo *JupgingLogDeleteOne) Exec(ctx context.Context) error {
	n, err := jldo.jld.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{jupginglog.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (jldo *JupgingLogDeleteOne) ExecX(ctx context.Context) {
	if err := jldo.Exec(ctx); err != nil {
		panic(err)
	}
}
