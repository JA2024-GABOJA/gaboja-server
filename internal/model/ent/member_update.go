// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"junction/internal/model/ent/jupginglog"
	"junction/internal/model/ent/member"
	"junction/internal/model/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MemberUpdate is the builder for updating Member entities.
type MemberUpdate struct {
	config
	hooks    []Hook
	mutation *MemberMutation
}

// Where appends a list predicates to the MemberUpdate builder.
func (mu *MemberUpdate) Where(ps ...predicate.Member) *MemberUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetSno sets the "sno" field.
func (mu *MemberUpdate) SetSno(i int) *MemberUpdate {
	mu.mutation.ResetSno()
	mu.mutation.SetSno(i)
	return mu
}

// SetNillableSno sets the "sno" field if the given value is not nil.
func (mu *MemberUpdate) SetNillableSno(i *int) *MemberUpdate {
	if i != nil {
		mu.SetSno(*i)
	}
	return mu
}

// AddSno adds i to the "sno" field.
func (mu *MemberUpdate) AddSno(i int) *MemberUpdate {
	mu.mutation.AddSno(i)
	return mu
}

// AddJupgingLogIDs adds the "jupgingLog" edge to the JupgingLog entity by IDs.
func (mu *MemberUpdate) AddJupgingLogIDs(ids ...int) *MemberUpdate {
	mu.mutation.AddJupgingLogIDs(ids...)
	return mu
}

// AddJupgingLog adds the "jupgingLog" edges to the JupgingLog entity.
func (mu *MemberUpdate) AddJupgingLog(j ...*JupgingLog) *MemberUpdate {
	ids := make([]int, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return mu.AddJupgingLogIDs(ids...)
}

// Mutation returns the MemberMutation object of the builder.
func (mu *MemberUpdate) Mutation() *MemberMutation {
	return mu.mutation
}

// ClearJupgingLog clears all "jupgingLog" edges to the JupgingLog entity.
func (mu *MemberUpdate) ClearJupgingLog() *MemberUpdate {
	mu.mutation.ClearJupgingLog()
	return mu
}

// RemoveJupgingLogIDs removes the "jupgingLog" edge to JupgingLog entities by IDs.
func (mu *MemberUpdate) RemoveJupgingLogIDs(ids ...int) *MemberUpdate {
	mu.mutation.RemoveJupgingLogIDs(ids...)
	return mu
}

// RemoveJupgingLog removes "jupgingLog" edges to JupgingLog entities.
func (mu *MemberUpdate) RemoveJupgingLog(j ...*JupgingLog) *MemberUpdate {
	ids := make([]int, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return mu.RemoveJupgingLogIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MemberUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, mu.sqlSave, mu.mutation, mu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MemberUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MemberUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MemberUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mu *MemberUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(member.Table, member.Columns, sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt))
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.Sno(); ok {
		_spec.SetField(member.FieldSno, field.TypeInt, value)
	}
	if value, ok := mu.mutation.AddedSno(); ok {
		_spec.AddField(member.FieldSno, field.TypeInt, value)
	}
	if mu.mutation.JupgingLogCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   member.JupgingLogTable,
			Columns: []string{member.JupgingLogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jupginglog.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedJupgingLogIDs(); len(nodes) > 0 && !mu.mutation.JupgingLogCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   member.JupgingLogTable,
			Columns: []string{member.JupgingLogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jupginglog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.JupgingLogIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   member.JupgingLogTable,
			Columns: []string{member.JupgingLogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jupginglog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{member.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mu.mutation.done = true
	return n, nil
}

// MemberUpdateOne is the builder for updating a single Member entity.
type MemberUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MemberMutation
}

// SetSno sets the "sno" field.
func (muo *MemberUpdateOne) SetSno(i int) *MemberUpdateOne {
	muo.mutation.ResetSno()
	muo.mutation.SetSno(i)
	return muo
}

// SetNillableSno sets the "sno" field if the given value is not nil.
func (muo *MemberUpdateOne) SetNillableSno(i *int) *MemberUpdateOne {
	if i != nil {
		muo.SetSno(*i)
	}
	return muo
}

// AddSno adds i to the "sno" field.
func (muo *MemberUpdateOne) AddSno(i int) *MemberUpdateOne {
	muo.mutation.AddSno(i)
	return muo
}

// AddJupgingLogIDs adds the "jupgingLog" edge to the JupgingLog entity by IDs.
func (muo *MemberUpdateOne) AddJupgingLogIDs(ids ...int) *MemberUpdateOne {
	muo.mutation.AddJupgingLogIDs(ids...)
	return muo
}

// AddJupgingLog adds the "jupgingLog" edges to the JupgingLog entity.
func (muo *MemberUpdateOne) AddJupgingLog(j ...*JupgingLog) *MemberUpdateOne {
	ids := make([]int, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return muo.AddJupgingLogIDs(ids...)
}

// Mutation returns the MemberMutation object of the builder.
func (muo *MemberUpdateOne) Mutation() *MemberMutation {
	return muo.mutation
}

// ClearJupgingLog clears all "jupgingLog" edges to the JupgingLog entity.
func (muo *MemberUpdateOne) ClearJupgingLog() *MemberUpdateOne {
	muo.mutation.ClearJupgingLog()
	return muo
}

// RemoveJupgingLogIDs removes the "jupgingLog" edge to JupgingLog entities by IDs.
func (muo *MemberUpdateOne) RemoveJupgingLogIDs(ids ...int) *MemberUpdateOne {
	muo.mutation.RemoveJupgingLogIDs(ids...)
	return muo
}

// RemoveJupgingLog removes "jupgingLog" edges to JupgingLog entities.
func (muo *MemberUpdateOne) RemoveJupgingLog(j ...*JupgingLog) *MemberUpdateOne {
	ids := make([]int, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return muo.RemoveJupgingLogIDs(ids...)
}

// Where appends a list predicates to the MemberUpdate builder.
func (muo *MemberUpdateOne) Where(ps ...predicate.Member) *MemberUpdateOne {
	muo.mutation.Where(ps...)
	return muo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MemberUpdateOne) Select(field string, fields ...string) *MemberUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Member entity.
func (muo *MemberUpdateOne) Save(ctx context.Context) (*Member, error) {
	return withHooks(ctx, muo.sqlSave, muo.mutation, muo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MemberUpdateOne) SaveX(ctx context.Context) *Member {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MemberUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MemberUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (muo *MemberUpdateOne) sqlSave(ctx context.Context) (_node *Member, err error) {
	_spec := sqlgraph.NewUpdateSpec(member.Table, member.Columns, sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt))
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Member.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, member.FieldID)
		for _, f := range fields {
			if !member.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != member.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.Sno(); ok {
		_spec.SetField(member.FieldSno, field.TypeInt, value)
	}
	if value, ok := muo.mutation.AddedSno(); ok {
		_spec.AddField(member.FieldSno, field.TypeInt, value)
	}
	if muo.mutation.JupgingLogCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   member.JupgingLogTable,
			Columns: []string{member.JupgingLogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jupginglog.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedJupgingLogIDs(); len(nodes) > 0 && !muo.mutation.JupgingLogCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   member.JupgingLogTable,
			Columns: []string{member.JupgingLogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jupginglog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.JupgingLogIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   member.JupgingLogTable,
			Columns: []string{member.JupgingLogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jupginglog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Member{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{member.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	muo.mutation.done = true
	return _node, nil
}
