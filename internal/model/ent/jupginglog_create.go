// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"junction/internal/model/ent/jupginglog"
	"junction/internal/model/ent/member"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// JupgingLogCreate is the builder for creating a JupgingLog entity.
type JupgingLogCreate struct {
	config
	mutation *JupgingLogMutation
	hooks    []Hook
}

// SetStartDate sets the "startDate" field.
func (jlc *JupgingLogCreate) SetStartDate(s string) *JupgingLogCreate {
	jlc.mutation.SetStartDate(s)
	return jlc
}

// SetEndDate sets the "endDate" field.
func (jlc *JupgingLogCreate) SetEndDate(s string) *JupgingLogCreate {
	jlc.mutation.SetEndDate(s)
	return jlc
}

// SetLog sets the "log" field.
func (jlc *JupgingLogCreate) SetLog(s string) *JupgingLogCreate {
	jlc.mutation.SetLog(s)
	return jlc
}

// SetMemberID sets the "member_id" field.
func (jlc *JupgingLogCreate) SetMemberID(i int) *JupgingLogCreate {
	jlc.mutation.SetMemberID(i)
	return jlc
}

// SetID sets the "id" field.
func (jlc *JupgingLogCreate) SetID(i int) *JupgingLogCreate {
	jlc.mutation.SetID(i)
	return jlc
}

// SetMember sets the "member" edge to the Member entity.
func (jlc *JupgingLogCreate) SetMember(m *Member) *JupgingLogCreate {
	return jlc.SetMemberID(m.ID)
}

// Mutation returns the JupgingLogMutation object of the builder.
func (jlc *JupgingLogCreate) Mutation() *JupgingLogMutation {
	return jlc.mutation
}

// Save creates the JupgingLog in the database.
func (jlc *JupgingLogCreate) Save(ctx context.Context) (*JupgingLog, error) {
	return withHooks(ctx, jlc.sqlSave, jlc.mutation, jlc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (jlc *JupgingLogCreate) SaveX(ctx context.Context) *JupgingLog {
	v, err := jlc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (jlc *JupgingLogCreate) Exec(ctx context.Context) error {
	_, err := jlc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jlc *JupgingLogCreate) ExecX(ctx context.Context) {
	if err := jlc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (jlc *JupgingLogCreate) check() error {
	if _, ok := jlc.mutation.StartDate(); !ok {
		return &ValidationError{Name: "startDate", err: errors.New(`ent: missing required field "JupgingLog.startDate"`)}
	}
	if _, ok := jlc.mutation.EndDate(); !ok {
		return &ValidationError{Name: "endDate", err: errors.New(`ent: missing required field "JupgingLog.endDate"`)}
	}
	if _, ok := jlc.mutation.Log(); !ok {
		return &ValidationError{Name: "log", err: errors.New(`ent: missing required field "JupgingLog.log"`)}
	}
	if _, ok := jlc.mutation.MemberID(); !ok {
		return &ValidationError{Name: "member_id", err: errors.New(`ent: missing required field "JupgingLog.member_id"`)}
	}
	if len(jlc.mutation.MemberIDs()) == 0 {
		return &ValidationError{Name: "member", err: errors.New(`ent: missing required edge "JupgingLog.member"`)}
	}
	return nil
}

func (jlc *JupgingLogCreate) sqlSave(ctx context.Context) (*JupgingLog, error) {
	if err := jlc.check(); err != nil {
		return nil, err
	}
	_node, _spec := jlc.createSpec()
	if err := sqlgraph.CreateNode(ctx, jlc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	jlc.mutation.id = &_node.ID
	jlc.mutation.done = true
	return _node, nil
}

func (jlc *JupgingLogCreate) createSpec() (*JupgingLog, *sqlgraph.CreateSpec) {
	var (
		_node = &JupgingLog{config: jlc.config}
		_spec = sqlgraph.NewCreateSpec(jupginglog.Table, sqlgraph.NewFieldSpec(jupginglog.FieldID, field.TypeInt))
	)
	if id, ok := jlc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := jlc.mutation.StartDate(); ok {
		_spec.SetField(jupginglog.FieldStartDate, field.TypeString, value)
		_node.StartDate = value
	}
	if value, ok := jlc.mutation.EndDate(); ok {
		_spec.SetField(jupginglog.FieldEndDate, field.TypeString, value)
		_node.EndDate = value
	}
	if value, ok := jlc.mutation.Log(); ok {
		_spec.SetField(jupginglog.FieldLog, field.TypeString, value)
		_node.Log = value
	}
	if nodes := jlc.mutation.MemberIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jupginglog.MemberTable,
			Columns: []string{jupginglog.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.MemberID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// JupgingLogCreateBulk is the builder for creating many JupgingLog entities in bulk.
type JupgingLogCreateBulk struct {
	config
	err      error
	builders []*JupgingLogCreate
}

// Save creates the JupgingLog entities in the database.
func (jlcb *JupgingLogCreateBulk) Save(ctx context.Context) ([]*JupgingLog, error) {
	if jlcb.err != nil {
		return nil, jlcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(jlcb.builders))
	nodes := make([]*JupgingLog, len(jlcb.builders))
	mutators := make([]Mutator, len(jlcb.builders))
	for i := range jlcb.builders {
		func(i int, root context.Context) {
			builder := jlcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*JupgingLogMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, jlcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, jlcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, jlcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (jlcb *JupgingLogCreateBulk) SaveX(ctx context.Context) []*JupgingLog {
	v, err := jlcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (jlcb *JupgingLogCreateBulk) Exec(ctx context.Context) error {
	_, err := jlcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jlcb *JupgingLogCreateBulk) ExecX(ctx context.Context) {
	if err := jlcb.Exec(ctx); err != nil {
		panic(err)
	}
}
